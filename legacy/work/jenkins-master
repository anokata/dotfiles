#!/bin/bash
git pull origin master
 GIT_PREVIOUS_COMMIT=$(git merge-base $GIT_COMMIT $GIT_PREVIOUS_COMMIT)
AUTHOR_EMAIL=$(git show --format="%aE" $GIT_COMMIT | head -n 1)
OPTIONS="--diff --max-line-length=120 --statistics --show-source --exclude=*smev*_api.py"
COMMIT_DATE=$(git show --format="%aD" $GIT_COMMIT | head -n 1)
COMMIT_BODY=$(git show --format="%B %N" $GIT_COMMIT | head -n 1)
AUTHOR=$(git show --format="%an" $GIT_COMMIT | head -n 1)
PRE_AUTHOR=$(git show --format="%an" $(git rev-list $GIT_COMMIT --max-count 2 | tail -n1) | head -n1)
PRE_EMAIL=$(git show --format="%aE" $(git rev-list $GIT_COMMIT --max-count 2 | tail -n1) | head -n1)
EMAILS="tikhomirovsvl@mosreg.ru belovmm@mosreg.ru $AUTHOR_EMAIL" 
ERRORS=0
BODYFILE=$(mktemp)
HEADFILE=$(mktemp)

echo $(git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT | ./checkpydoc.py)
INFILES=$(git diff $GIT_PREVIOUS_COMMIT $GIT_COMMIT --name-only)
FILES=()
i=0

# Filter generated files
for file in $INFILES; do
    IS_API=$(basename $file | grep '_api.py$' > /dev/null; echo $?)
    IS_SMEV=$(echo $file | grep 'smev' > /dev/null; echo $?)
    echo $IS_API $IS_SMEV

    if ! grep generateDS $file >/dev/null && ( !(exit $IS_API) || !(exit $IS_SMEV) ); then
        FILES[i]=$file
        i=$(expr $i + 1)
        echo PROC $file
    fi
done

# check for style errors
for file in $FILES; do
    if ! git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT $file | pycodestyle $OPTIONS; then
        ERRORS=1
        break
    fi
done

# make errors message
if [ $ERRORS = 1 ]; then
for file in $FILES; do
    if ! git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT $file | pycodestyle $OPTIONS; then
        git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT $file | pycodestyle $OPTIONS  >> $BODYFILE
    fi
done
echo "" >> $BODYFILE
fi

ERRORS=0
# Check docstrings
for file in $FILES; do
    if ! git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT $file | ./checkpydoc.py ; then
        ERRORS=1
        echo "Docstring errors:" >> $BODYFILE
        break
    fi
done

for file in $FILES; do
    if ! git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT $file | ./checkpydoc.py ; then
        git diff -U0 $GIT_PREVIOUS_COMMIT $GIT_COMMIT $file | ./checkpydoc.py  >> $BODYFILE
    fi
done

if [ $ERRORS == 1 ]; then
    echo "Commit @ $COMMIT_DATE" >> $HEADFILE
    echo "By $AUTHOR" >> $HEADFILE
    echo "(previous commit author: $PRE_AUTHOR)" >> $HEADFILE
    echo "Commit message: $COMMIT_BODY" >> $HEADFILE
    echo "" >> $HEADFILE
    cat $HEADFILE $BODYFILE| mail -s "Jenkins Style errors in commit by $AUTHOR" $EMAILS
fi

rm $BODYFILE
rm $HEADFILE
exit $ERRORS



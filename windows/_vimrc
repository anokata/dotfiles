" vim: set syntax=vim:

" NEW USE: csw)  ysiwt<html> cswt< dst   del tag ysiw 
" gd - goto def
" buffers
    ":sb
    ":b
    "change tabnew at end to buffers in 2 tabs
"insert mode: <C-X><Space> <C-X>/
":Git ,ga ,gc ,gp
"@h
",;
"zm
"https://shapeshed.com/vim-netrw/

" Plugins {{{


call plug#begin('D:/dev/vim/plugged')
"call plug#begin('~/.vim/plugged')
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-repeat' 
Plug 'tpope/vim-commentary'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'gorodinskiy/vim-coloresque'
Plug 'tpope/vim-vinegar'
Plug 'plasticboy/vim-markdown'
Plug 'mzlogin/vim-markdown-toc'
Plug 'https://github.com/adelarsq/vim-matchit'
Plug 'tpope/vim-ragtag'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'tpope/vim-unimpaired'
"Plug 'tpope/vim-dadbod'
"Plug 'docunext/closetag.vim'
"Plug 'majutsushi/tagbar'
"Plug 'vim-scripts/taglist.vim'
"Plug 'vim-scripts/utl.vim'
"Plug 'vim-scripts/DfrankUtil'
"tpope/vim-heroku
"Plug 'Shougo/unite.vim'

"Plug 'godlygeek/tabular'
"Plug 'OmniSharp/omnisharp-vim'

" Python
"Plug 'flebel/vim-mypy', { 'for': 'python', 'branch': 'bugfix/fast_parser_is_default_and_only_parser' }
"Plug 'Integralist/vim-mypy'
"Plug 'tell-k/vim-autopep8'
"Plug 'python-rope/ropevim'
"Plug 'dense-analysis/ale'

" JS
"Plug 'vim-syntastic/syntastic'
"Plug 'ternjs/tern_for_vim', { 'do' : 'npm install' }
"Plug '1995eaton/vim-better-javascript-completion'
"Html
"Plug 'mattn/emmet-vim'
"Plug 'kywind3000/asyncrun.vim'
" html match tags MUSThave!
"Plug 'sukima/xmledit'
Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'leafgarland/typescript-vim' " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax
"Plug 'styled-components/vim-styled-components'
"Plug 'jparise/vim-graphql'        " GraphQL syntax
"Plug 'neoclide/coc.nvim', {'branch': 'release'}

"Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
" https://github.com/liuchengxu/vim-clap/issues/439

"<Leader>p
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }

" https://github.com/junegunn/fzf.vim
":Buffers
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug 'junegunn/fzf.vim'           " Set up fzf and fzf.vim
"Plug 'chrisbra/csv.vim'
"Plug 'mkomitee/vim-gf-python'
"Plug 'vim-scripts/utf8-math'
"Plug 'ktonga/vim-follow-my-lead'
"Plug 'stormherz/tablify'
"Plug 'vim-scripts/code_complete'
"Plug 'valloric/matchtagalways'
"Plug 'artur-shaik/vim-javacomplete2'
"Plug 'sirver/ultisnips'
"Plug 'vim-scripts/math'
"Plug 'vim-scripts/Align'
"Plug 'easymotion/vim-easymotion'
"Plug 'airblade/vim-rooter'
"Plug 'vimplugin/project.vim'
"Plug 'hoxnox/indexer.vim'
"tormaza Plug 'dhruvasagar/vim-table-mode'
"Plug 'kassio/neoterm'
"Plug 'tpope/vim-speeddating'
"Plug 'jceb/vim-orgmode'
"Plug 'Scuilion/markdown-drawer'
"Plug 'vim-ctrlspace/vim-ctrlspace'
"Plug 'vim-scripts/vimprj'
"Plug 'yuratomo/w3m.vim'
"Plug 'vim-scripts/OmniCppComplete'
"Plug 'LaTeX-Box-Team/LaTeX-Box'
"Plug 'lervag/vimtex'

call plug#end()
" }}}

" Plugin settings let {{{
let delimitMate_balance_matchpairs = 1
let g:ragtag_global_maps = 1

let g:airline_powerline_fonts = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#close_symbol = 'x'
let g:airline_extensions = ['tabline']
let g:airline_theme='minimalist'
let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_section_x = ''
let g:airline_section_z = '%3p%% %#__accent_bold#%{g:airline_symbols.linenr}%2l%#__restore__#%#__accent_bold#/%L%#__restore__# :%3v'
let g:airline_section_b = ''
let g:airline_section_c = '%<%f%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'

let g:rooter_patterns = ['Makefile']

let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 2
let g:netrw_winsize = 35
let g:netrw_altv = 1
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|env\'

let g:vim_markdown_conceal = 2
let g:vim_markdown_autowrite = 1
" 'tab', 'vsplit', 'hsplit', 'current'"
let g:vim_markdown_edit_url_in = 'tab'
let g:vmt_dont_insert_fence = 0
let g:vmt_list_item_char='-'
let g:vmt_include_headings_before=1
let g:vmt_auto_update_on_save = 1
let g:vim_markdown_follow_anchor = 1

let g:asyncomplete_auto_popup = 1
let g:syntastic_python_checkers=['mypy']
let ropevim_vim_completion=1
let g:ropevim_autoimport_modules = ["os", "shutil"]
let b:ale_fixers = ['prettier', 'eslint']
let g:ale_fixers = {'python': ['remove_trailing_lines', 'trim_whitespace', 'prettier', 'eslint']}
let g:ale_fix_on_save = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_eslint_exe = 'npm run lint --'
let g:syntastic_javascript_eslint_exe = 'eslint .'
let g:vimjs#casesensistive = 1
let g:vimjs#smartcomplete = 0
let g:vimjs#chromeapis = 0

let g:NERDTreeWinPos = "right"
let NERDTreeIgnore = ['\.pyc$']

"==== Session ====
nmap <C-F5> :call MakeDefSession()<CR>
nmap <S-F5> :call LoadDefSession()<CR>

" }}}

" Color {{{
let g:solarized_termcolors=256
set t_Co=256
set background=dark
set t_ut=

function! MyHighlights() abort
":help syntax *highlight-groups* 
    highlight Normal ctermbg=NONE gui=NONE
    highlight nonText ctermbg=NONE gui=NONE
    highlight lCursor guifg=NONE guibg=Cyan
    highlight htmlLink cterm=underline guifg=#aaaacc gui=underline
    hi Title	guifg=#109098
    hi Folded guibg=#505050 guifg=#c0b030
    hi LineNr guifg=#70a0c0
    hi Pmenu	guibg=#303050
    "PmenuSel PmenuSbar PmenuThumb

endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END

colorscheme desert 

" }}}

" Basic settings {{{
let mapleader=","
let maplocalleader=";"
set autochdir
set autoindent
set autoread
set clipboard=unnamed
set clipboard=unnamedplus
set cmdheight=2
set conceallevel=2
set expandtab
set foldenable
set foldlevelstart=0
set foldmethod=syntax
set foldlevel=20
set hidden
set ignorecase
set iminsert=0
set imsearch=0
set laststatus=2
set lazyredraw
set nobackup
set nocompatible
set noswapfile
set nowritebackup
set number
set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone
set shiftwidth=4
set shiftwidth=4
set smartcase
set t_Co=256
set t_ut=
set tabstop=4
set tags=~/mytags
set textwidth=0
set wildmenu
set wildmode=longest:list,full
set wrap
set wrapmargin=0
"set keymap=russian-jcukenwin
set guioptions -=T
set guioptions -=L
"syn region foldBraces start=/{/ end=/}/ transparent fold
"syn region foldJavadoc start=,/\*\*, end=,\*/, transparent fold keepend
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
"set guifont=Lucida_Console:h11
"set guifont=courier_new:h12
set guifont=DejaVu\ Sans\ Mono:h12
set encoding=utf-8
set noerrorbells visualbell t_vb=
set guioptions+=c

function Maximize()
   winpos 0 0
   set lines=80
   set columns=238
endfunction


filetype off
filetype plugin indent on
syntax on

" if has("autocmd")
"   filetype plugin indent on
" endif

" Status line
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
"set statusline +=%3*%y%*                "file type
set statusline +=%3*%=%*
"set statusline +=%{SyntasticStatuslineFlag()}
set statusline +=%1*\ %<%F\ %*            "full path
"set statusline +=%3*%m%*                "modified flag
"set statusline +=%3*/%L%*               "total lines
"set statusline +=%1*%4v\ %*             "virtual column number
" }}}

" ================ Persistent Undo ================== {{{
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
    redraw!
endif
" }}}

" Mapping {{{
nmap <leader>r :NERDTreeToggle<CR>
nmap <leader>Y :NERDTreeClose<CR>
nmap <leader>C :!ctags -R -o ~/mytags `pwd`<cr>
" ## Edit .vimrc ##
map <leader>v :vsp $MYVIMRC<CR>:set foldmethod=marker<cr>
map <leader>V :source $MYVIMRC<CR>
map <leader>ev :tabnew $MYVIMRC<CR>
map <leader>es :source %<CR>
" ==== Tabs ====
nmap <leader>t :tabnew<CR>
nmap <leader>w :tabclose<CR>
nmap <leader>, :tabnext<CR>
nmap <leader>. :tabprev<CR>
" ==== Folding ====
"nmap <leader>f zf)
"nmap <leader>f :set foldmethod=indent<CR>
"nmap <leader>f :FZF!<CR>
"nmap <C-p> :FZF<CR>
nnoremap <space> za
" copy to system buffer
nmap <leader>y "+y
" Paste from Clipboard
"nmap <leader>p "+p
nmap <leader>P o<ESC>"+P
" Copy vim def " buffer to clipboard
nmap <leader>s :let @+=@"<CR>
" for windows, copy to sys buffer
nmap yy yy<leader>s
" paste link
"nmap <leader>l o<ESC>"+p0yss[

"map <leader>r :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
nmap <leader>q :w<CR>
nmap <leader>e :wq<CR>
nmap <leader>X :!chmod +x %<CR>
nmap <Leader>u ysiw_ysiw_

" moving normal in russian
nmap ё `
nmap Ж :
nmap ш i
nmap о j
nmap л k
nmap ф a
nmap Ф A
nmap б ,
nmap ю .
cmap ц w
cmap й q
cmap ч x
cmap у e
cmap ф a

" VIMSCRIPT  run current line
noremap <c-c> yy:@"<CR>
" run paragraph
noremap <c-s-x> {V}kyy:@"<CR>}
"noremap <leader>c yy:@"<CR>
" enter will insert line
"noremap <cr> o<Esc>
noremap <leader><cr> xi<cr><esc>
" AVOID SHIFT AND CTL " enter to cmd mode
"noremap <space> :
"noremap q<space> q:

" typos correction and abbrevations
iabbrev adn and
iabbrev waht what
iabbrev tehn then
iabbrev fi if
iabbrev funciotn function
iabbrev funciton function
iabbrev @@@ quartenium@gmail.com
iabbrev ifmain if __name__=='__main__':<CR>
iabbrev #i #include
iabbrev #d #define

inoremap jk <esc>
inoremap kj <esc>
inoremap <c-d> <esc>ddi
inoremap <c-u> <esc>viwUi

nnoremap - h
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
nnoremap GG GGzz

" d(el) y(ank) c(hange) inside ()
onoremap p i(
" F select function name
onoremap <silent> F :<C-U>normal! 0f(hviw<CR>
" make open google word under cursor in tab
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
" Map ctrl-movement keys to window switching
nnoremap <C-k> <C-w><Up>
nnoremap <C-j> <C-w><Down>
nnoremap <C-l> <C-w><Right>
nnoremap <C-h> <C-w><Left>
nnoremap <bs> <C-w><Left>
nnoremap <leader>d :execute "normal! a" . expand("%:p:h")<cr>
" Toggle paste mode
nnoremap <silent> <F4> :set invpaste<CR>:set paste?<CR>
inoremap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" open previous buffer in vert split
"nnoremap <leader>p :execute "rightbelow vsplit " . bufname("#")<cr>
" add semicolon in the end, save cursor
function! _Add_semi()
    let cmd=':execute "normal! mqA;\<esc>`q"'
    echo cmd
    execute cmd
endfunction
nnoremap <leader>; :call _Add_semi()<cr>

" Search by grep with quick-window mappings
"nnoremap <leader>g :execute "grep! -R " . shellescape(expand("<cWORD>")) . " %"<cr><cr>:cope<cr><c-w><c-w>
nnoremap <leader>n :cnext<cr>
nnoremap <leader>l :cclose<cr>

" MD: GenTocGFM HeaderIncreace UpdateToc 
nmap <leader>T :GenTocGFM<CR>
nmap <leader>x gxdd,q
nmap <leader>Y :Toc<CR>
nmap <leader>mt :Toc<CR>
" make Header
let @h='0y$,sI[A]A()hp0'
"nnoremap <Space> za
nmap <leader>ga :Git add .<CR>
"TODO currentfile nmap <leader>gA :Git add filename<CR>
nmap <leader>gc :Git commit<CR>
nmap <leader>gp :Git push<CR>
nmap <leader>gg :Git add .<bar>Git commit<CR><bar>Git push<CR>


if has("gui_running")
    inoremap <C-Space> <C-n>
else " no gui
  if has("unix")
    inoremap <Nul> <C-n>
  endif
endif

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" open omni completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <S-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
            \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'


" }}}

"==== DEV ==== {{{
function CompileCS()
    exec "!dotnet run"
endfunction

function RunJSNODE()
    let filename = expand('%:t:r')
    let fullfilename = expand('%:t')
    let ext = expand('%:e')

    if ext == 'ts'

        
        let compile = join(["!tsc --strictNullChecks --noEmitOnError -t es6 ", fullfilename])
        exec compile

        if v:shell_error != 0
            return
        endif

        let cmd = join(["!node ", filename])
        exec cmd
    else
        let cmd = join(["!start cmd /k \"node ", fullfilename, "\""])
        exec cmd
    endif
    
endfunction

function RunESLINT()
    let filename = expand('%')
    let cmd = join(["!start cmd /k \"npx eslint ", filename, "\""])
    exec cmd
endfunction

function CompileJava()
    " Run from source dir where package root
    " TODO Find root dir, if threre source, down n. or in prj dir
    let filename = expand('%:t:r')
    let package = getline(1)
    let packagename = split(package, ' ')[1]
    let packagename =  trim(packagename, ";")
    exec "cd ../../../"
    let path = substitute(packagename, '[.]', '/', 'g')
    
    let cmd = join([":silent !javac ", path, "/", filename, ".java -d ../classes/"], "")
    exec cmd
    let cmd = join(["!java -cp ../classes/ ", packagename, ".", filename], "")
    exec cmd
    exec "cd -"
    execute "redraw!"
endfunction

map <F3> :w<CR>:!make<CR>
map <F5> :w<CR>:!make '%:t:r'<CR>
"map <F5> :w<CR>:call CompileCS()<CR>
map <F6> :w<CR>:!make <CR>
map <F6> :w<CR>:!javac -d ~/classes '%:t:r'.java && java -ea -cp ~/classes '%:t:r'<CR>
"map <F7> :call CompileJava()<CR>
"map <F7> :w<CR>:!javac '%:t:r'.java -d ~/classes/<CR>:!java -cp ~/classes/ '%:t:r'<CR>
"map <F7> :w<CR>:!gcc -Wall '%' -o /run/user/$(id -u)/a.out && ./run/user/$(id -u)/a.out<CR>
"map <F8> :w<CR>:!jar -cvmf ../../manifest ~/classes/'%:t:r'.jar -C ~/classes/ com<CR>:!java -jar ~/classes/'%:t:r'.jar<CR>
"map <F8> :w<CR>:!g++ -std=c++11 '%' -o /run/user/$(id -u)/a.out && ./run/user/$(id -u)/a.out<CR>
"nmap <leader>b :TagbarToggle<CR>
" Javascript
map <F5> :w<CR>:call RunJSNODE()<CR>
map <F6> :!start cmd /k "npm start"<CR>
map <F7> :!start cmd /k "npm run dev"<CR>
nmap <F8> :!start cmd /k "cmd"<CR>
nmap <F8> :!start "D:/progs/Git/git-bash"<CR>
nmap <F9> :!start cmd /k "npm run test"<CR>
nmap <F12> :!start cmd /k "npm run lint"<CR>
nmap <F12> :w<CR>:call RunESLINT()<CR>

"map <F9> :w<CR>:!texmake %<CR>
"map <F9> :w<CR>:!make App<CR>
map <C-F9> :!python3 -i '%:t'<CR>
" SHELL
"map <F9> :w<CR>:!./%<CR>
map <F10> :w<CR>:!python '%:t'<CR>
map <C-F10> :w<CR>:!epython '%:t'<CR>
"VimL
map <F11> :w<CR>:source %<CR>
"map <F3> :w<CR>:!javac '%' && java '%:r'<CR>
"map <F9> :w<CR> :!perl '%'<CR>
"map <F10> :w<CR>:!make test<CR>
"map <C-F8> :!dot -Tpng % -o%.png && feh %.png<CR>
" }}}

" Macros {{{
" Insert macros q:  i ctrl-r ctrl-r q"
" param on new line
let @d='f,lli'
" }}}

" AutoCMD {{{
augroup allAutoCmds
    autocmd!
    "autocmd FileType python colorscheme sonokai
    "autocmd FileType java setlocal omnifunc=javacomplete#Complete
    "
    "autocmd FileType markdown :onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
    " BufEnter
    "au BufNewFile,BufRead * set syntax=markdown
    "au BufNewFile,BufRead * set filetype=markdown
    autocmd GUIEnter * call Maximize()
    autocmd FileType python :iabbrev <buffer> iff if:<left>
    autocmd FileType vim setlocal foldmethod=marker
    autocmd BufNewFile,BufRead *vimrc set syntax=vim
    autocmd GUIEnter * set visualbell t_vb=
    autocmd BufEnter *.md set filetype=markdown
    autocmd BufEnter *.md set syntax=markdown
    autocmd BufEnter *.js,*.mjs set filetype=javascript
augroup END
" }}}

" {{{ Auto open files in tabs
autocmd GUIEnter * silent edit D:\doc\dev\way2021\js.md
autocmd GUIEnter * silent edit D:\doc\indexpath.md
autocmd GUIEnter * silent edit D:\doc\draw\etudes.md
autocmd GUIEnter * silent tabnew F:\dev\js\idler01\idler01.js
"autocmd GUIEnter * silent tabnew D:\doc\mind\mind_2021.md
"}}}


set autowrite
nnoremap <leader>Q :q!<CR>
nnoremap <leader>b :buffers<cr>:b<space> 
nnoremap <leader>B :CtrlPBuffer<cr>
nnoremap <C-S-T> :CtrlP D:/doc<cr>
nnoremap <C-S-H> :CtrlP F:/dev<cr>
"C-d
let doc='D:/doc'
let dev='F:/dev'
